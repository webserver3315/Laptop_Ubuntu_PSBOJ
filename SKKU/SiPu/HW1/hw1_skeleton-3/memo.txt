[sfp는 8비트 버리고, 1비트 sign, 7비트 exp, 16비트 significand이다.]
1. 32비트 int를 sfp로 바꾸는 함수.
sfp의 범위를 초과한다면 양 또는 음의 무한을 반환. 무한의 부호는 중요하다.
round toward zero 가 요구된다.
0의 경우, 양의 0.0으로 변환하라
[구현방안]
일단 함수 내부적으로 unsigned int를 선언하는데, 애초에 0 선언한다.
int의 경우 1:1매칭되지않나? 32비트 int는 대략 2e9까지 표현가능한데, sfp의 경우....
2의7승에 16비트 signi...
일단 시프트의 수학적 의미는, n>>x는 n*2^x와,
n<<x는 n*2^-x 를 소수점 아래 버린 것과 수학적으로 동일하다.
예를 들어, (a<<3) + (a<<1) 과 10 * a는 같은 뜻이다. 

16777217는 32비트 float으로 나타낼 수 없는 첫 수이다.

2. sfp를 32비트 int로 바꾸는 함수.
양의 무한과 음의 무한은 각각 TMax, TMin 으로 변환된다.
TMax와 TMin은 int형의 최대 및 최소값이다.
양 또는 음의 NaN값이라면 무조건 TMin으로 변환하라
round toward zero를 사용하라.


[완료]
sfp_mul, add NaN 연산 예외처리완료

float2sfp에서 sfp로 표현할 수 없는 0에 가까운 수, 즉 underflow가 나면 0을 반환한다. 무한이 아니라

sfp add, mult 함수 Special Value 예외처리 완료
sfp add, mult 함수에서 ms1 ms2 대소비교 함수 sign bit 반영토록 업데이트 완료



+0 과 -0을 더하는 경우 round to even을 적용하여 +0을 반환




오해성 테케 i 262144 i 3 뚫기
모범답안: 0_1010001_00000000_00000001

자작테케 for Add Function
i 0b00000000000000010000000000000001
i 0b00000000100000010000000000000000


sfp2int에서 argument로 넘어오는 sfp값의 범위가 int값의 범위를 넘지 않더라도 int값을 초과하거나 발생하지 않을 denormalized한 상황을 처리해줘야한다.

addition 함수 반드시 round to even 추후 구현해야 한다

예시 3번처럼 exp 가 0000000 로 나타나고 fraction 값이 0 이 아닌 경우에 Smallest denormalized 값(exp =0 && fraction bit = 000..001)보다 작은지 까지 판별해서 범위를 벗어나는지 판단해줘야 하나요? ->denormalized, normalized 관계없이 sfp로 표현할 수 있는 범위인지 판별해야한다.

    mys1.raw.sign=0; mys1.raw.exp=0b0000000; mys1.raw.frac=0xFFFF;
    mys2.raw.sign=0; mys2.raw.exp=0b0000000; mys2.raw.frac=0xFFFF;
    res.s=sfp_add(mys1.s, mys2.s);
즉, dn + dn = n 될 경우까지 add에서 구현해주면 완벽해질 것 같다.

dn - n = dn 되는 경우 예외처리 안되어있다.
    mys1.raw.sign=0; mys1.raw.exp=0b0000000; mys1.raw.frac=1;
    mys2.raw.sign=1; mys2.raw.exp=0b0000001; mys2.raw.frac=0;
    mys1 + mys2 = 10000000_11111111_11111111이 답일 것
sign 때고 절댓값 큰 거에서 작은거 무조건 빼. 부호는 절댓값 큰거를 따라가면 되잖아.

[진행중]
dn * n 처리 되어있나?

    mys1.raw.sign=0; mys1.raw.exp=0b0000000; mys1.raw.frac=1;
    mys2.raw.sign=1; mys2.raw.exp=0b0111111; mys2.raw.frac=0xFFFF;

    mys1.raw.sign=0; mys1.raw.exp=0b0000000; mys1.raw.frac=0xFFFF;
    mys2.raw.sign=1; mys2.raw.exp=0b0111111; mys2.raw.frac=0xFFFF;


