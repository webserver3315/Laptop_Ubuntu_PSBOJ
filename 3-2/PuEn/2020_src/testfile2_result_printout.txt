"C:\Users\LG gram\anaconda3\envs\201207_AI_HW2\python.exe" "C:/Users/LG gram/Desktop/Final/compiler2020.py"
================Tokens==================
['word : ', 'main']
['bracket : ', '(']
['bracket : ', ')']
['bracket : ', '{']
['type : ', 'int']
['word : ', 'apple']
['comma, semicolon : ', ';']
['type : ', 'int']
['word : ', 'bread']
['comma, semicolon : ', ';']
['type : ', 'int']
['word : ', 'chocolate']
['comma, semicolon : ', ';']
['word : ', 'apple']
['operator : ', '=']
['number', '0']
['comma, semicolon : ', ';']
['word : ', 'bread']
['operator : ', '=']
['number', '1']
['comma, semicolon : ', ';']
['word : ', 'chocolate']
['operator : ', '=']
['number', '100']
['comma, semicolon : ', ';']
['statement : ', 'WHILE']
['word : ', 'chocolate']
['operator : ', '>']
['word : ', 'apple']
['operator : ', '+']
['word : ', 'bread']
['bracket : ', '{']
['type : ', 'int']
['word : ', 'dimsum']
['comma, semicolon : ', ';']
['word : ', 'dimsum']
['operator : ', '=']
['word : ', 'bread']
['operator : ', '*']
['word : ', 'bread']
['comma, semicolon : ', ';']
['word : ', 'apple']
['operator : ', '=']
['word : ', 'apple']
['operator : ', '+']
['word : ', 'dimsum']
['comma, semicolon : ', ';']
['word : ', 'bread']
['operator : ', '=']
['word : ', 'bread']
['operator : ', '+']
['number', '1']
['comma, semicolon : ', ';']
['bracket : ', '}']
['statement : ', 'IF']
['word : ', 'apple']
['operator : ', '>']
['number', '100']
['statement : ', 'THEN']
['bracket : ', '{']
['word : ', 'apple']
['operator : ', '=']
['number', '100']
['comma, semicolon : ', ';']
['bracket : ', '}']
['statement : ', 'ELSE']
['bracket : ', '{']
['EXIT : ', 'EXIT']
['number', '0']
['comma, semicolon : ', ';']
['bracket : ', '}']
['bracket : ', '}']

================LL grammar==================
prog [['word', '(', ')', 'block']]
decl [['vtype', 'word', ';']]
vtype [['int'], ['char']]
block [['{', 'decls', 'slist', '}'], ['']]
stat [['IF', 'cond', 'THEN', 'block', 'ELSE', 'block'], ['WHILE', 'cond', 'block'], ['word', '=', 'expr', ';'], ['EXIT', 'expr', ';']]
fact [['num'], ['word']]
word [['([a-z] | [A-Z])*']]
num [['[0-9]*']]
decls [["decls'"]]
decls' [['decl', "decls'"], ['']]
slist [["slist'"]]
slist' [['stat', "slist'"], ['']]
cond [['expr', "cond'"]]
cond' [['>', 'expr'], ['==', 'expr']]
expr [['term', "expr'"]]
expr' [['+', 'term'], ['']]
term [['fact', "term'"]]
term' [['*', 'fact'], ['']]

================Non-terminal==================
['prog', 'decl', 'vtype', 'block', 'stat', 'fact', 'word', 'num', 'decls', "decls'", 'slist', "slist'", 'cond', "cond'", 'expr', "expr'", 'term', "term'"]

================Terminal==================
['WHILE', ')', 'EXIT', 'char', '=', 'ELSE', 'IF', '}', '>', '(', '==', '[0-9]*', '([a-z] | [A-Z])*', '+', '*', ';', '{', 'THEN', 'int', '$']

================First==================
prog {'([a-z] | [A-Z])*'}
decl {'char', 'int'}
vtype {'char', 'int'}
block {'', '{'}
stat {'IF', 'EXIT', '([a-z] | [A-Z])*', 'WHILE'}
fact {'[0-9]*', '([a-z] | [A-Z])*'}
word {'([a-z] | [A-Z])*'}
num {'[0-9]*'}
decls {'char', '', 'int'}
decls' {'char', '', 'int'}
slist {'', 'WHILE', 'IF', 'EXIT', '([a-z] | [A-Z])*'}
slist' {'', 'WHILE', 'IF', 'EXIT', '([a-z] | [A-Z])*'}
cond {'[0-9]*', '([a-z] | [A-Z])*'}
cond' {'>', '=='}
expr {'[0-9]*', '([a-z] | [A-Z])*'}
expr' {'', '+'}
term {'[0-9]*', '([a-z] | [A-Z])*'}
term' {'', '*'}

================Follow==============
prog {'$'}
decl {'}', 'WHILE', 'ELSE', 'IF', 'int', '$', 'EXIT', '([a-z] | [A-Z])*', 'char'}
vtype {'([a-z] | [A-Z])*'}
block {'}', 'WHILE', 'ELSE', 'IF', '$', 'EXIT', '([a-z] | [A-Z])*'}
stat {'}', 'WHILE', 'IF', 'EXIT', '([a-z] | [A-Z])*'}
fact {'>', '}', 'WHILE', '+', '*', 'IF', ';', '==', 'THEN', '{', 'EXIT', '([a-z] | [A-Z])*'}
word {'>', '}', '(', 'WHILE', '+', '*', '=', 'IF', ';', '==', 'THEN', '{', 'EXIT', '([a-z] | [A-Z])*'}
num {'>', '}', 'WHILE', '+', '*', 'IF', ';', '==', 'THEN', '{', 'EXIT', '([a-z] | [A-Z])*'}
decls {'}', 'WHILE', 'ELSE', 'IF', '$', 'EXIT', '([a-z] | [A-Z])*'}
decls' {'}', 'WHILE', 'ELSE', 'IF', '$', 'EXIT', '([a-z] | [A-Z])*'}
slist {'}'}
slist' {'}'}
cond {'}', 'WHILE', 'IF', 'THEN', '{', 'EXIT', '([a-z] | [A-Z])*'}
cond' {'}', 'WHILE', 'IF', 'THEN', '{', 'EXIT', '([a-z] | [A-Z])*'}
expr {'>', '}', 'WHILE', 'IF', ';', '==', 'THEN', '{', 'EXIT', '([a-z] | [A-Z])*'}
expr' {'>', '}', 'WHILE', 'IF', ';', '==', 'THEN', '{', 'EXIT', '([a-z] | [A-Z])*'}
term {'>', '}', 'WHILE', '+', 'IF', ';', '==', 'THEN', '{', 'EXIT', '([a-z] | [A-Z])*'}
term' {'>', '}', 'WHILE', '+', 'IF', ';', '==', 'THEN', '{', 'EXIT', '([a-z] | [A-Z])*'}

================Table==============
0 WHILE ) EXIT char = ELSE IF } > ( == [0-9]* ([a-z] | [A-Z])* + * ; { THEN int $ 
prog 0 0 0 0 0 0 0 0 0 0 0 0 ['word', '(', ')', 'block'] 0 0 0 0 0 0 0 
decl 0 0 0 ['vtype', 'word', ';'] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ['vtype', 'word', ';'] 0 
vtype 0 0 0 ['char'] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ['int'] 0 
block [''] 0 [''] 0 0 [''] [''] [''] 0 0 0 0 [''] 0 0 0 ['{', 'decls', 'slist', '}'] 0 0 [''] 
stat ['WHILE', 'cond', 'block'] 0 ['EXIT', 'expr', ';'] 0 0 0 ['IF', 'cond', 'THEN', 'block', 'ELSE', 'block'] 0 0 0 0 0 ['word', '=', 'expr', ';'] 0 0 0 0 0 0 0 
fact 0 0 0 0 0 0 0 0 0 0 0 ['num'] ['word'] 0 0 0 0 0 0 0 
word 0 0 0 0 0 0 0 0 0 0 0 0 ['([a-z] | [A-Z])*'] 0 0 0 0 0 0 0 
num 0 0 0 0 0 0 0 0 0 0 0 ['[0-9]*'] 0 0 0 0 0 0 0 0 
decls [''] 0 [''] ["decls'"] 0 [''] [''] [''] 0 0 0 0 [''] 0 0 0 0 0 ["decls'"] [''] 
decls' [''] 0 [''] ['decl', "decls'"] 0 [''] [''] [''] 0 0 0 0 [''] 0 0 0 0 0 ['decl', "decls'"] [''] 
slist ["slist'"] 0 ["slist'"] 0 0 0 ["slist'"] [''] 0 0 0 0 ["slist'"] 0 0 0 0 0 0 0 
slist' ['stat', "slist'"] 0 ['stat', "slist'"] 0 0 0 ['stat', "slist'"] [''] 0 0 0 0 ['stat', "slist'"] 0 0 0 0 0 0 0 
cond 0 0 0 0 0 0 0 0 0 0 0 ['expr', "cond'"] ['expr', "cond'"] 0 0 0 0 0 0 0 
cond' 0 0 0 0 0 0 0 0 ['>', 'expr'] 0 ['==', 'expr'] 0 0 0 0 0 0 0 0 0 
expr 0 0 0 0 0 0 0 0 0 0 0 ['term', "expr'"] ['term', "expr'"] 0 0 0 0 0 0 0 
expr' [''] 0 [''] 0 0 0 [''] [''] [''] 0 [''] 0 [''] ['+', 'term'] 0 [''] [''] [''] 0 0 
term 0 0 0 0 0 0 0 0 0 0 0 ['fact', "term'"] ['fact', "term'"] 0 0 0 0 0 0 0 
term' [''] 0 [''] 0 0 0 [''] [''] [''] 0 [''] 0 [''] [''] ['*', 'fact'] [''] [''] [''] 0 0 
================Table Ends==============

============Parsing tree============
0|'prog'
1|	'word'
2|		'([a-z] | [A-Z])*'
1|	'('
1|	')'
1|	'block'
2|		'{'
2|		'decls'
3|			"decls'"
4|				'decl'
5|					'vtype'
6|						'int'
5|					'word'
6|						'([a-z] | [A-Z])*'
5|					';'
4|				"decls'"
5|					'decl'
6|						'vtype'
7|							'int'
6|						'word'
7|							'([a-z] | [A-Z])*'
6|						';'
5|					"decls'"
6|						'decl'
7|							'vtype'
8|								'int'
7|							'word'
8|								'([a-z] | [A-Z])*'
7|							';'
6|						"decls'"
7|							''
2|		'slist'
3|			"slist'"
4|				'stat'
5|					'word'
6|						'([a-z] | [A-Z])*'
5|					'='
5|					'expr'
6|						'term'
7|							'fact'
8|								'num'
9|									'[0-9]*'
7|							"term'"
8|								''
6|						"expr'"
7|							''
5|					';'
4|				"slist'"
5|					'stat'
6|						'word'
7|							'([a-z] | [A-Z])*'
6|						'='
6|						'expr'
7|							'term'
8|								'fact'
9|									'num'
10|										'[0-9]*'
8|								"term'"
9|									''
7|							"expr'"
8|								''
6|						';'
5|					"slist'"
6|						'stat'
7|							'word'
8|								'([a-z] | [A-Z])*'
7|							'='
7|							'expr'
8|								'term'
9|									'fact'
10|										'num'
11|											'[0-9]*'
9|									"term'"
10|										''
8|								"expr'"
9|									''
7|							';'
6|						"slist'"
7|							'stat'
8|								'WHILE'
8|								'cond'
9|									'expr'
10|										'term'
11|											'fact'
12|												'word'
13|													'([a-z] | [A-Z])*'
11|											"term'"
12|												''
10|										"expr'"
11|											''
9|									"cond'"
10|										'>'
10|										'expr'
11|											'term'
12|												'fact'
13|													'word'
14|														'([a-z] | [A-Z])*'
12|												"term'"
13|													''
11|											"expr'"
12|												'+'
12|												'term'
13|													'fact'
14|														'word'
15|															'([a-z] | [A-Z])*'
13|													"term'"
14|														''
8|								'block'
9|									'{'
9|									'decls'
10|										"decls'"
11|											'decl'
12|												'vtype'
13|													'int'
12|												'word'
13|													'([a-z] | [A-Z])*'
12|												';'
11|											"decls'"
12|												''
9|									'slist'
10|										"slist'"
11|											'stat'
12|												'word'
13|													'([a-z] | [A-Z])*'
12|												'='
12|												'expr'
13|													'term'
14|														'fact'
15|															'word'
16|																'([a-z] | [A-Z])*'
14|														"term'"
15|															'*'
15|															'fact'
16|																'word'
17|																	'([a-z] | [A-Z])*'
13|													"expr'"
14|														''
12|												';'
11|											"slist'"
12|												'stat'
13|													'word'
14|														'([a-z] | [A-Z])*'
13|													'='
13|													'expr'
14|														'term'
15|															'fact'
16|																'word'
17|																	'([a-z] | [A-Z])*'
15|															"term'"
16|																''
14|														"expr'"
15|															'+'
15|															'term'
16|																'fact'
17|																	'word'
18|																		'([a-z] | [A-Z])*'
16|																"term'"
17|																	''
13|													';'
12|												"slist'"
13|													'stat'
14|														'word'
15|															'([a-z] | [A-Z])*'
14|														'='
14|														'expr'
15|															'term'
16|																'fact'
17|																	'word'
18|																		'([a-z] | [A-Z])*'
16|																"term'"
17|																	''
15|															"expr'"
16|																'+'
16|																'term'
17|																	'fact'
18|																		'num'
19|																			'[0-9]*'
17|																	"term'"
18|																		''
14|														';'
13|													"slist'"
14|														''
9|									'}'
7|							"slist'"
8|								'stat'
9|									'IF'
9|									'cond'
10|										'expr'
11|											'term'
12|												'fact'
13|													'word'
14|														'([a-z] | [A-Z])*'
12|												"term'"
13|													''
11|											"expr'"
12|												''
10|										"cond'"
11|											'>'
11|											'expr'
12|												'term'
13|													'fact'
14|														'num'
15|															'[0-9]*'
13|													"term'"
14|														''
12|												"expr'"
13|													''
9|									'THEN'
9|									'block'
10|										'{'
10|										'decls'
11|											''
10|										'slist'
11|											"slist'"
12|												'stat'
13|													'word'
14|														'([a-z] | [A-Z])*'
13|													'='
13|													'expr'
14|														'term'
15|															'fact'
16|																'num'
17|																	'[0-9]*'
15|															"term'"
16|																''
14|														"expr'"
15|															''
13|													';'
12|												"slist'"
13|													''
10|										'}'
9|									'ELSE'
9|									'block'
10|										'{'
10|										'decls'
11|											''
10|										'slist'
11|											"slist'"
12|												'stat'
13|													'EXIT'
13|													'expr'
14|														'term'
15|															'fact'
16|																'num'
17|																	'[0-9]*'
15|															"term'"
16|																''
14|														"expr'"
15|															''
13|													';'
12|												"slist'"
13|													''
10|										'}'
8|								"slist'"
9|									''
2|		'}'

======Printing nodes of the syntax tree======
main ( ) { int apple ; int bread ; int chocolate ;  apple = 0   ; bread = 1   ; chocolate = 100   ; WHILE chocolate   > apple  + bread  { int dimsum ;  dimsum = bread * bread  ; apple = apple  + dimsum  ; bread = bread  + 1  ;  } IF apple   > 100   THEN {  apple = 100   ;  } ELSE {  EXIT 0   ;  }  }

=======Intermediate representation========
0. BEGIN main
1. apple = 0  
2. bread = 1  
3. chocolate = 100  
4. goto L2
5. L1
6. dimsum = bread * bread 
7. apple = apple  + dimsum 
8. bread = bread  + 1 
9. L2
10. if chocolate > apple + bread goto L1
11. if apple > 100 THEN goto L3
12. EXIT 0  
13. goto L4
14. L3
15. apple = 100  
16. L4
17. END main


Process finished with exit code 0
